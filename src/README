# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Code structure
# -- -- -- -- -- -- -- -- -- -- -- -- -- --

src/main:
	The main control loop is main/main.c. See main/README for more info.

Devices:
	Each device should have it's own API, in a separate folder (example: imu/).
	A control loop will check with device has data available, and read only from the devices that do have data, avoiding locking. this is done via select().
	Each device should provide a way to access their file descriptor, and a function to update/read data once it is available.

src/common:
	Code that can be used in a general context (several devices, control loop, etc) such as io, error handling, logging, etc goes in common/

src/test:
	Test programs have their individual directory within test/

Build system:
      Build system is based on cmake. Instructions follow on how to get it running without reading much.      
      Basic intro: http://mathnathan.com/2010/07/11/getting-started-with-cmake/


# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Navigating through code
# -- -- -- -- -- -- -- -- -- -- -- -- -- --

To access implementation of functions or definition of structures using emacs do:
   cd src/
   ./mktags.sh
This will generate src/TAGS. Now go to emacs and do:
   M-x visit-tags-table RET src/TAGS RET
Now to go to a def place the cursor on it and do:
   Alt+.
To go back, do
   Alt+*

The emacs configuration file used for code indentation is in src/emacs_config

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. gpsd
# -- -- -- -- -- -- -- -- -- -- -- -- -- --

  gpsd is not within the cmake build system. It must be manually compiled by running scons
in src/submodules/gpsd/

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. CMake basics
# -- -- -- -- -- -- -- -- -- -- -- -- -- --
cmake will parse CMakeLists.txt, and dig into any directories listed as:
   add_subdirectory(dir_name)
It will search for headers in the directories (separated by spaces) listed in:
   include_directories(dir1 dir2)

Each subdirectory has a CMakeLists.txt of its own, that can point deeper into the tree.

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Setting up the build system
# -- -- -- -- -- -- -- -- -- -- -- -- -- --
To setup the build system do
   ./run_cmake.sh
   

Optional arguments to the script are:
   - debug: Will build code with debug symbols.
   - arm  : Use cross compiler, generate code that will run on the beagle.
   - help : Show possible arguments.

This will setup everything in src/build/ (or src/arm_build/)
To compile a test program, for example imu_comm_test
   cd build/
   make imu_comm_test

You will find the output in src/build/test/imu_comm_test

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Cross compiling
# -- -- -- -- -- -- -- -- -- -- -- -- -- --
To cross compile code, a toolchain must be available on the system.
If you're using openembedded+bitbake, then you probably have one lying around.
Everytime you open a console, the file ~/.bashrc is loaded. Set an environment variable to point to your toolchain in your ~/.bashrc by adding this line:
    export OE_BEAGLE_TOOLCHAIN=$OE_BUILD_TMPDIR/sysroots/x86_64-linux/usr/armv7a/bin

The variable OE_BUILD_TMPDIR should have been set by openembedded in ~/.oe/environment-2008
I recommend adding this line to your ~/.bashrc before the line defining OE_BEAGLE_TOOLCHAIN. It will load all the variables defined by openembedded into every console you open:
    source ~/.oe/environment-2008

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Adding a new test program:
# -- -- -- -- -- -- -- -- -- -- -- -- -- --
- Create a new dir:
  mkdir test/new_test
  cd test/new_test
  cp ../imu_comm_test/CMakeLists.txt .

- Add the new directory to cmake's subdirs by editing test/CMakeLists.txt
      before editing:
      	     add_subdirectory(imu_comm_test)
      after editing:
      	     add_subdirectory(imu_comm_test new_test)

Edit the CMakeLists.txt in new_test/ according to your needs:
     - Set the program name
     - List the required libraries.

# -- -- -- -- -- -- -- -- -- -- -- -- -- --
#. Refs
# -- -- -- -- -- -- -- -- -- -- -- -- -- --

- http://www.cmake.org/cmake/help/cmake-2-8-docs.html#module:ExternalProject