# Program description

main.c is THE autopilot software.
It will perform the following:

   - Startup all IO devices:
     - IMU
     - GPS
     - STDIN
     - motors
   - Read out from the IMU dev, to discard data accumulated between the moment the /dev/tty 
   was opened and now, when we will start reading from it.
   - Calibrate IMU.
   - Update heading (theta/yaw) setpoint using calibration.
   - Use STARTUP_SAMPLES samples to ramp motors from min to hovering speed.
   - Run main loop, which will:
     - Check for updates from IO: IMU/GPS
     - Update state estimation.
     - Update set point based on current position.
     - Update motor speed according to control.

# Configuration

Configuration settings are defined in src/common/uquad_config.h, and global parameters are
in src/common/uquad_types.h

Enabling/disabling GPS is configured in src/CMakelists.txt

# How to run

For normal use, ie, to fly the quadcopter, a script <code>go.sh</code> is available in <code>src/</code>. Running it should build/copy/organize everything necessary to get the control loop running.

The program will not run on its own, it requires:
    - A server running on <code>10.42.43.1</code>, enabling main to terminate if wireless connection is lost.
    - GPS: main can run with or without a GPS device. To enable using GPS, set USE_GPS to 1 
    in src/CMakelists.txt.
    If a fake GPS (all zeros) is desired, for example for indoor testing, then GPS_ZERO must
    be set to 1 in src/common/uquad_config.h
    - cmd: this is the motor driver. It will continuosly send commands to the motors, and update the value send according to what main.c sends via kernel message queues. NOTE: If i2c is not available, ie, if testing on a PC, the cmd must be compiled to fake i2c. To do this, go to src/i2c_beagle and run:<pre><code>make pc_test
</code></pre>
This will generate an executable cmdpc_test, which must be copied to <code>src/build/main/</code> and renamed to cmd.
    - An IMU connected to a serial line. If IMU is not available, an ascii log file may be used. It must have the same format as the IMU uses when running in ascii mode (default). The IMU module must be compiled setting <code>IMU_COMM_FAKE</code> to 1.
    - imu_calib.txt: IMU module expects a calibration file. (should be taken care of by <code>go.sh</code>).
    - Control gain matrices (should be taken care of by <code>go.sh</code>).

# Output handling

If in debug mode (<code>DEBUG</code> set to 1 in <code>src/common/uquad_config.h</code>) then main will save data to log
files, in a folder specified at startup. Defaults to /media/sda1/
These files can be copied to a new directory using the script <code>src/copy_logs.sh</code>

A MatLab script to load and plot is available at <code>tests/mongoose/m/plot_c.m</code>

Logs are enabled by setting defines to 1/0 in main.c
