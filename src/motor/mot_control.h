/**
 * mot_control: lib for interfacing with motor driver
 * Copyright (C) 2012  Rodrigo Rosa <rodrigorosa.lg gmail.com>, Matias Tailanian <matias tailanian.com>, Santiago Paternain <spaternain gmail.com>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @file   mot_control.h
 * @author Rodrigo Rosa <rodrigorosa.lg gmail.com>, Matias Tailanian <matias tailanian.com>, Santiago Paternain <spaternain gmail.com>
 * @date   Sun May 27 11:08:44 2012
 *
 * @brief  lib for interfacing with motor driver
 *
 * Will start an instance of cmd, executable generated by compiling
 *   src/i2c_beagle/cmd_motores.c
 * and send commands to modify motor speed.
 * Will limit speed range. cmd_motores.c has matched limits.
 *
 * Features:
 *    - Handles motor startup/stop
 *    - Asymetric IPC with cmd via uquad_kernel_msgq lib, will clear data in queue if
 *    cmd does not ack before new data is ready, since old data corresponds to obsolete
 *    control actions, and hence is of no use.
 *    - Converts from theoretical world {[rad/s] and [theoretical motor numbering]} to real
 *    world {[8 bit i2c value] and [ESC motor order]}.
 *
 * Examples:
 *   - src/main/main.c
 *   - src/test/motor/motor_test.c
 */
#ifndef MOT_CONTROL_H
#define MOT_CONTROL_H

#include <uquad_types.h>
#include <uquad_aux_math.h>
#include <uquad_aux_time.h>
#include <uquad_kernel_msgq.h>
#include <uquad_error_codes.h>
#include <stdio.h>
#include <stdint.h>

#if DEBUG
//#define DEBUG_MOT
#endif

#define MOT_I2C_MAX         220     // i2c
#define MOT_I2C_IDLE        60      // i2c
#define MOT_W_MAX           368.0   // rad/s (match MOT_MAX_I2C)
#define MOT_W_IDLE          130.0   // rad/s (match MOT_IDLE_I2C)
#define MOT_C               4

#define MOT_UPDATE_MAX_US   2000    // us
#define MOT_WAIT_STARTUP_MS 4500    // ms
#define MOT_WAIT_STARTUP_S  1       // s

#define START_MOTOR_CMD "./cmd &"
#define KILL_MOTOR_CMD  "kill -INT `pidof -s cmd` 2> /dev/null &"

/// Communication with motor driver is done via kernel msgs
#define MOT_SERVER_KEY 169 // some number
#define MOT_DRIVER_KEY 170 // some other number

/// Log data
#define MOT_LOG_TX "cmd_tx.log"

/**
 * Structure to hold motor status.
 * 
 * Motors are defined as:
 *  0: 0x69
 *  1: 0x6b
 *  2: 0x6a
 *  3: 0x68
 *
 * The driver order is:
 *  0: 0x69
 *  1: 0x6a
 *  2: 0x6b
 *  3: 0x68
 * Order is adapted before sending
 * 
 */
typedef struct uquad_mot{
    FILE *tx_log;
    uint8_t i2c_curr[MOT_C];
    uint8_t i2c_target[MOT_C];
    uquad_mat_t *w_curr;
    uquad_kmsgq_t *kmsgq;
    struct timeval last_set;

    /// Keep track of weight and hover speed
    double w_hover;
    double weight;
    double w_min;
    double w_max;
}uquad_mot_t;

/**
 * Allocates memory for uquad_mot_t, opens log
 * files and opens file for interaction will motor controlling
 * program.
 *
 * @param start_motors If initialization is successful and start_motors, then
 *        motors will be running at idle speed after init.
 *
 * @return Instance of uquad_mot_t, or NULL if error.
 */
uquad_mot_t *mot_init(uquad_bool_t start_motors);

/**
 * Takes an array of rads/s and sets the corresponding
 * i2c value as target speed.
 *
 * @param mot
 * @param w target speed, in rad/s
 * @param force Ignore max/min settings for W
 *
 * @return error code
 */
int mot_set_vel_rads(uquad_mot_t *mot, uquad_mat_t *w, uquad_bool_t force);

/**
 * Sets idle speed as target speed for all motors.
 * The motors will be running, but not fast enough
 * to move the cuadcopter.
 * 
 * @param mot 
 * 
 * @return error code
 */
int mot_set_idle(uquad_mot_t *mot);

/**
 * Sets speed to zero for all motors.
 * 
 * @param mot 
 * 
 * @return error code
 */
int mot_stop(uquad_mot_t *mot);

/**
 * Cleans up uquad_mot_t, closing all opened files and
 * freeing memory.
 * Will only close opened files (will check), and will
 * check if mem was previously allocated before attemping
 * to free.
 * 
 * @param mot 
 * 
 * @return error code to indicate if system call to kill
 * driver was successfull.
 */
int mot_deinit(uquad_mot_t *mot);

/**
 * Updates the speed that should be set on the motors to
 * mantain a quadcopter of weight in steady in the air.
 *
 * @param mot
 * @param weight  [kg]
 *
 * @return error code
 */
int mot_update_w_hover(uquad_mot_t *mot, double weight);
#endif //MOT_CONTROL_H
